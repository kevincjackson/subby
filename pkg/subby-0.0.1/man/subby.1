.\" generated with Ronn/v0.7.3
.\" http://github.com/rtomayko/ronn/tree/0.7.3
.
.TH "SUBBY" "" "August 2018" "" ""
.
.SH "NAME"
\fBsubby\fR
.
.SH "SYNOPSIS"
\fBsubby\fR \fIstring_in\fR \fIstring_out\fR
.
.br
\fBsubby\fR \fB\-c case,\.\.\.\fR \fIstring_in\fR \fIstring_out\fR
.
.br
.
.SH "DESCRIPTION"
\fBsubby\fR is a command\-line tool for substituting strings and their case variations\.
.
.P
By default \fBsubby\fR is greedy\. It will substitute the \fIstring_in\fR case variations and its singular or plural equivalents\.
.
.P
Here\'s a list of cases that \fBsubby\fR handles\. Note that class and module are synonyms, as are snake and underscore\.
.
.IP "" 4
.
.nf

CASE                EXAMPLE
=====================================
camel               applePie
class | module      ApplePie
constant            APPLE_PIE
dash                apple\-pie
lower               apple pie
sentence            Apple pie
snake | underscore  apple_pie
title               Apple Pie
upper               APPLE PIE
.
.fi
.
.IP "" 0
.
.P
If you wish to limit the cases that subby processes you may pass the \fB\-c\fR option with a comma\-separated list of desired cases\. The \fB\-c\fR option should be sufficient for most purposes\. If you are interested in lower\-level options read on\.
.
.P
If you wanted to only process singulars or plurals, you can do so using \fB\-\-number\-in\fR, which take an enum of \fIsingular\fR, \fI1\fR, \fIplural\fR, or \fI2\fR\. Note that \fI1\fR and \fIsingular\fR are synonyms, as are \fI2\fR and \fIplural\fR\.
.
.P
If you wanted to select only certain cases to convert to one particular case you could select your incoming cases using \fB\-c\fR or \fB\-\-case\-in\fR and select your desired case using \fB\-\-case\-out\fR\.
.
.P
The same applies for singular and plurals using \fB\-\-number\-in\fR and \fB\-\-number out\fR\.
.
.P
Note that \fB\-c\fR / \fB\-\-case\-in\fR is the only option that takes a list\. If you would like to map a series of variations, a separate \fBsubby\fR command would be required for each unique outcome variation\.
.
.SH "OPTIONS"
.
.IP "\(bu" 4
\fB\-c\fR, \fB\-\-case\-in CASE_IN,\.\.\.\fR:
.
.br
acts as a filter for the list of cases to process
.
.br
valid arguments are the following:
.
.br
camel|class|constant|dash|lower|module|sentence|snake|title|underscore|upper|all
.
.br
default is all
.
.IP "\(bu" 4
\fB\-\-case\-out CASE_OUT\fR:
.
.br
all incoming strings will be converted to this case
.
.br
valid arguments are the following:
.
.br
camel|class|constant|dash|lower|module|sentence|snake|title|underscore|upper|match
.
.br
default is match (to CASE_IN)
.
.IP "\(bu" 4
\fB\-\-number\-in NUMBER_IN\fR:
.
.br
acts as a filter to limit processing to singulars, or plurals
.
.br
valid arguments are singular|plural|1|2|all
.
.br
1 and 2 are short hand for singular and plural
.
.br
default is all
.
.IP "\(bu" 4
\fB\-\-number\-out NUMBER_OUT\fR:
.
.br
all incoming strings will be converted to NUMBER_OUT
.
.br
valid arguments are singular|plural|1|2|match
.
.br
default is match (to NUMBER_IN)
.
.IP "" 0
.
.SH "EXAMPLES"
.
.TP
Replace \'applePie\' and its variations with \'chocolateCake\':
.
.IP
\fB$ cat apple_pie\.txt\fR
.
.br
applePie apple_pie ApplePie ApplePies
.
.IP
\fB$ subby applePie chocolateCake < apple_pie\.txt\fR
.
.IP
chocolateCake chocolate_cake ChocolateCake ChocolateCakes
.
.TP
Limit which cases to process:
.
.IP
\fB$ subby \-c camel,snake applePie chocolateCake < apple_pie\.txt\fR
.
.br
chocolateCake chocolate_cake ApplePie ApplePies

