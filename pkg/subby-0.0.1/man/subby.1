.\" generated with Ronn/v0.7.3
.\" http://github.com/rtomayko/ronn/tree/0.7.3
.
.TH "SUBBY" "1" "August 2018" "" ""
.
.SH "NAME"
\fBsubby\fR
.
.SH "SYNOPSIS"
\fBsubby\fR \fIstring_in\fR \fIstring_out\fR
.
.br
\fBsubby\fR [\fB\-i\fR \fIcase_in\fR\.\.\.] [\fB\-o\fR \fIcase_out\fR] \fIstring_in\fR \fIstring_out\fR
.
.br
\fBsubby\fR [\fB\-i\fR \fIcase_in\fR\.\.\.] \fB\-o\fR \fIcase_out\fR \fIstring_in\fR [\fIstring_out\fR]
.
.br
.
.SH "DESCRIPTION"
\fBSubby\fR is a command\-line tool for substituting string case variations\.
.
.P
\fBSubby\fR reads from standard input and writes to standard output\.
.
.P
By default \fBsubby\fR is greedy\. It will substitute the 9 \fIstring_in\fR case variations that it knows\.
.
.P
Here\'s the list of cases that \fBsubby\fR handles\. Note that class and module are synonyms, as are snake and underscore, Also note that camel does not have an upper and lower case form\. Upper camel is called class or module\.
.
.IP "" 4
.
.nf

CASE                EXAMPLE
=====================================
camel               applePie
class | module      ApplePie
constant            APPLE_PIE
dash                apple\-pie
lower               apple pie
sentence            Apple pie
snake | underscore  apple_pie
title               Apple Pie
upper               APPLE PIE
.
.fi
.
.IP "" 0
.
.P
If you wish to limit the cases that \fBsubby\fR matches pass the \fB\-i\fR option with a comma\-separated list of desired cases\.
.
.P
If you wish to change the order of substitution \fBsubby\fR will follow the order given in the \fB\-i\fR option\. By default \fBsubby\fR will use the order given in the table above\.
.
.P
If you wish to convert all incoming cases to one particular case pass the \fB\-o\fR option with your desired case\. You may omit \fIstring_out\fR if it\'s the same as \fIstring_in\fR when using \fB\-o\fR\.
.
.P
If you wish to map case variations from one to another, note that \fB\-i\fR takes an array, while \fB\-o\fR does not\. A separate \fBsubby\fR command would be required for each unique outcome variation\.
.
.SH "OPTIONS"
.
.IP "\(bu" 4
\fB\-i\fR, \fB\-\-case\-in CASE_IN\.\.\.\fR:
.
.br
acts as a filter/array for the list of cases to match
.
.br
valid arguments are the following:
.
.br
camel|class|constant|dash|lower|module|sentence|snake|title|underscore|upper
.
.br
default is all of the above
.
.IP "\(bu" 4
\fB\-o\fR, \fB\-\-case\-out CASE_OUT\fR:
.
.br
all incoming strings will be converted to this case
.
.br
valid arguments are the following:
.
.br
camel|class|constant|dash|lower|module|sentence|snake|title|underscore|upper
.
.br
default is match (to CASE_IN)
.
.IP "" 0
.
.SH "EXAMPLES"
.
.IP "\(bu" 4
Replace \'applePie\' variations with \'chocolateCake\':
.
.IP
\fB$ cat apple_pie\.txt\fR
.
.br
applePie apple_pie ApplePie ApplePies
.
.IP
\fB$ subby applePie chocolateCake < apple_pie\.txt\fR
.
.IP
chocolateCake chocolate_cake ChocolateCake ChocolateCakes
.
.IP "\(bu" 4
Limit which cases to process:
.
.IP
\fB$ subby \-i camel,snake applePie chocolateCake < apple_pie\.txt\fR
.
.br
chocolateCake chocolate_cake ApplePie ApplePies
.
.IP "\(bu" 4
Convert camel\-cases to snake\-cases\.
.
.IP
\fB$ subby \-i camel \-o snake applePie chocolateCake < apple_pie\.txt\fR
.
.br
chocolateCake chocolate_cake ApplePie ApplePies
.
.IP "" 0
.
.SH "LIMITATIONS"
Substituting strings "recursively" may yield undesired results\. Consider this example\.
.
.P
\fB$ echo "a" | subby a aa\fR
.
.br
aaaaaaaaaaaaaaaa
.
.P
The run on of aaa\'s happens because \fBsubby\fR runs 9 separate substitute commands, each time substituting "aa" for "a"\. This behavior will most likely change in the future\.
